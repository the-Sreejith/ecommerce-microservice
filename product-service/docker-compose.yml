version: '3.8'

services:
  product-service:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - DYNAMODB_TABLE=${DYNAMODB_TABLE}
      - JWT_SECRET=${JWT_SECRET}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - ADMIN_CHECK_QUEUE=${ADMIN_CHECK_QUEUE}
      - INVENTORY_NOTIFICATION_QUEUE=${INVENTORY_NOTIFICATION_QUEUE}
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - rabbitmq
    networks:
      - ecommerce-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ecommerce-network

  dynamodb-local:
    image: amazon/dynamodb-local:latest
    ports:
      - "8000:8000"
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /data"
    volumes:
      - dynamodb_data:/home/dynamodblocal/data
    networks:
      - ecommerce-network

volumes:
  rabbitmq_data:
  dynamodb_data:

networks:
  ecommerce-network:
    driver: bridge 